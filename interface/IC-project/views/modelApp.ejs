<!DOCTYPE html>
<html>

<head>
    <title>Model Application </title>
    <link rel="stylesheet" type="text/css" href="stylesheets/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
</head>

<body>
    <div id="menu">
        <%- include('templates/side_menu.ejs') %>
    </div>

    <div id="conteudo">
        <h1 style="width: calc(90%); text-align: center;">Aplicação do Modelo e uso de XAI para calibração</h1>
        <form id="uploadFormModel" enctype="multipart/form-data">
            <div style="display: flex; align-items: center; gap: 10px;">
                <div id="fakeFileInputModel" style="align-content: center;">
                    <span id="fakeFileSpan"><b>Selecionar Modelo</b></span>
                    <input type="file" id="fileInputModel" name="uploadModel" accept=".pkl" style="display: none;">
                </div>
                <p id="modelFileName">Modelo:</p>
                <button type="submit" id="uploadButtonModel">Upload Modelo</button>
                <p id="uploadStatusModel"></p>
            </div>
        </form>
        <form id="uploadFormDataset" enctype="multipart/form-data">
            <div style="display: flex; align-items: center; gap: 10px;">
                <div id="fakeFileInputDataset" style="align-content: center;">
                    <span id="fakeFileSpan"><b>Selecionar Dataset</b></span>
                    <input type="file" id="fileInputDataset" name="uploadDataset" accept=".csv" style="display: none;">
                </div>
                <p id="datasetFileName">Dataset:</p>
                <button type="submit" id="uploadButtonDataset">Upload Dataset</button>
                <p id="uploadStatusDataset"></p>
            </div>
        </form>
        <script>
            // Requisição inicial para buscar o nome do arquivo e número de variáveis ao carregar a página
            window.addEventListener('DOMContentLoaded', () => {
                fetch('/modelFileName')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Nenhum modelo selecionado');
                        }
                        return response.json();
                    })
                    .then(data => {
                        document.getElementById('modelFileName').innerText = 'Modelo: ' + data.fileName;
                    })
                    .catch(error => {
                        console.error('Erro ao carregar modelo:', error);
                        document.getElementById('modelFileName').innerText = 'Nenhum modelo selecionado';
                    });
            });
            window.addEventListener('DOMContentLoaded', () => {
                fetch('/datasetFileName')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Nenhum dataset selecionado');
                        }
                        return response.json();
                    })
                    .then(data => {
                        document.getElementById('datasetFileName').innerText = 'Dataset: ' + data.fileName;
                    })
                    .catch(error => {
                        console.error('Erro ao carregar dataset:', error);
                        document.getElementById('datasetFileName').innerText = 'Nenhum dataset selecionado';
                    });
            });
        </script>
        <script>
            const fakeFileInputModel = document.getElementById('fakeFileInputModel');
            const fileInputModel = document.getElementById('fileInputModel');

            fakeFileInputModel.addEventListener('click', () => {
                fileInputModel.click();
            });

            fileInputModel.addEventListener('change', () => {
                document.getElementById('uploadButtonModel').click();
            });

            // Add event listener to form submission
            document.getElementById('uploadFormModel').addEventListener('submit', function (event) {
                event.preventDefault();

                var formDataModel = new FormData();
                var fileInputModel = document.getElementById('fileInputModel');
                formDataModel.append('uploadModel', fileInputModel.files[0]);

                // Display upload in progress message
                document.getElementById('uploadStatusModel').textContent = 'Upload in progress...';

                // Send form data asynchronously using AJAX
                fetch('/uploadModel', {
                    method: 'POST',
                    body: formDataModel
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        // Display upload successful message
                        document.getElementById('uploadStatusModel').textContent = '';

                        // Fetch model file name again to update
                        return fetch('/modelFileName');
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data); // Para verificar o que está sendo retornado
                        document.getElementById('modelFileName').innerText = 'Modelo: ' + data.fileName;
                    })
                    .catch(error => {
                        console.error('There was a problem with the file upload:', error);
                        // Display upload failed message
                        document.getElementById('uploadStatusModel').textContent = 'Upload failed. Please try again';
                    });
            });

            const fakeFileInputDataset = document.getElementById('fakeFileInputDataset');
            const fileInputDataset = document.getElementById('fileInputDataset');

            fakeFileInputDataset.addEventListener('click', () => {
                fileInputDataset.click();
            });

            fileInputDataset.addEventListener('change', () => {
                document.getElementById('uploadButtonDataset').click();
            });

            // Add event listener to form submission
            document.getElementById('uploadFormDataset').addEventListener('submit', function (event) {
                event.preventDefault(); // Evita o envio padrão do formulário

                var formDataDataset = new FormData(); // Cria um objeto FormData para armazenar os dados do formulário
                var fileInputDataset = document.getElementById('fileInputDataset');
                formDataDataset.append('uploadDataset', fileInputDataset.files[0]); // Adiciona o arquivo ao FormData

                // Exibe a mensagem de upload em progresso
                document.getElementById('uploadStatusDataset').textContent = 'Upload in progress...';

                // Envia os dados do formulário usando fetch
                fetch('/uploadDataset', {
                    method: 'POST',
                    body: formDataDataset
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        // Limpa a mensagem de upload
                        document.getElementById('uploadStatusDataset').textContent = '';

                        // Busca o nome do dataset atualizado
                        return fetch('/datasetFileName');
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data); // Para depuração
                        document.getElementById('datasetFileName').innerText = 'Dataset: ' + data.fileName;

                        // Atualiza os filtros de variáveis com o novo dataset
                        fetchVariables();
                    })
                    .catch(error => {
                        console.error('There was a problem with the file upload:', error);
                        // Display upload failed message
                        document.getElementById('uploadStatusDataset').textContent = 'Upload failed. Please try again';
                    });
            });
        </script>
        <p style="margin-top: 25px;"></p>
        <p style="margin-right: 10px; color: #333; font-weight: bold;">
            Selecione a <u>variável alvo</u>:
        </p>
        <div class="search-filter">
            <input type="text" id="search-target" placeholder="Digite para buscar..." onkeyup="filterOptions('target')">
            <div id="checkbox-list-target" class="checkbox-list"></div>
        </div>
        <script>
            let options = [];
            const selectedTarget = {};
            const selectedDeleted = {};

            // Função para buscar as variáveis do backend
            function fetchVariables() {
                fetch('/datasetFileName')
                    .then(response => response.json())
                    .then(data => {
                        options = data.variaveis;
                        filterOptions('target');
                        filterOptions('deleted');
                    })
                    .catch(error => {
                        console.error('Erro ao buscar as variáveis:', error);
                    });
            }

            // Função para filtrar e exibir as opções
            function filterOptions(type) {
                const searchValue = document.getElementById(`search-${type}`).value.toLowerCase();
                const checkboxList = document.getElementById(`checkbox-list-${type}`);
                checkboxList.innerHTML = ''; // Limpa as opções anteriores

                const otherSelections = type === 'target' ? selectedDeleted : selectedTarget;
                const filteredOptions = options.filter(
                    option => option.toLowerCase().includes(searchValue) && !otherSelections[option]
                );

                filteredOptions.forEach(option => {
                    const label = document.createElement('label');
                    const isChecked = (type === 'target' ? selectedTarget : selectedDeleted)[option] || false;
                    label.innerHTML = `<input type="checkbox" name="option" value="${option}" ${isChecked ? 'checked' : ''} 
                onchange="updateSelection(this, '${type}')"> ${option}`;
                    checkboxList.appendChild(label);
                });
            }

            // Função para atualizar o estado de seleção
            function updateSelection(checkbox, type) {
                const selectedGroup = type === 'target' ? selectedTarget : selectedDeleted;
                const otherGroup = type === 'target' ? selectedDeleted : selectedTarget;

                if (type === 'target') {
                    // Garante que apenas um checkbox pode ser selecionado para a variável alvo
                    if (checkbox.checked) {
                        // Desmarca qualquer outra opção selecionada
                        Object.keys(selectedTarget).forEach(key => {
                            delete selectedTarget[key];
                        });

                        // Marca a nova opção
                        selectedTarget[checkbox.value] = true;
                    } else {
                        delete selectedTarget[checkbox.value];
                    }
                } else {
                    // Mantém a lógica normal para variáveis excluídas (permite múltiplas seleções)
                    selectedGroup[checkbox.value] = checkbox.checked;
                }

                // Remove a variável do outro filtro se foi selecionada
                if (checkbox.checked) {
                    delete otherGroup[checkbox.value];
                }

                // Atualiza as listas para refletir as mudanças
                filterOptions('target');

            }

            // Inicializa as variáveis ao carregar a página
            fetchVariables();
        </script>
        <form id="uploadFormSample" enctype="multipart/form-data">
            <div style="display: flex; align-items: center; gap: 10px;">
                <div id="fakeFileInputSample" style="align-content: center;">
                    <span id="fakeFileSpan"><b>Selecionar Sample</b></span>
                    <input type="file" id="fileInputSample" name="uploadSample" accept=".csv" style="display: none;">
                </div>
                <button type="submit" id="uploadButtonSample">Upload Sample</button>
                <p id="uploadStatusSample"></p>
            </div>
        </form>
        <canvas id="limeChart" width="calc(70%)" height="calc(35%)"
            style="max-width: calc(70%); max-height: calc(35%);"></canvas>
        <script>
            const fakeFileInputSample = document.getElementById('fakeFileInputSample');
            const fileInputSample = document.getElementById('fileInputSample');

            fakeFileInputSample.addEventListener('click', () => {
                fileInputSample.click();
            });

            fileInputSample.addEventListener('change', () => {
                document.getElementById('uploadButtonSample').click();
            });

            document.getElementById('uploadFormSample').addEventListener('submit', function (event) {
                event.preventDefault();

                var formDataSample = new FormData();
                var fileInputSample = document.getElementById('fileInputSample');
                formDataSample.append('uploadSample', fileInputSample.files[0]);

                document.getElementById('uploadStatusSample').textContent = 'Upload in progress...';

                fetch('/uploadSample', {
                    method: 'POST',
                    body: formDataSample
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const ctx = document.getElementById('limeChart').getContext('2d');

                        // Ordena as features por peso (em ordem decrescente)
                        const sortedEntries = Object.entries(data).sort((a, b) => b[1] - a[1]);
                        const labels = sortedEntries.map(entry => entry[0]);
                        const values = sortedEntries.map(entry => entry[1]);

                        // Define cores diferentes para pesos positivos e negativos
                        const backgroundColors = values.map(value => value >= 0 ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)');
                        const borderColors = values.map(value => value >= 0 ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)');

                        // Destruir gráfico anterior se existir
                        if (window.limeChart && typeof window.limeChart.destroy === 'function') {
                            window.limeChart.destroy();
                        }


                        // Criar novo gráfico
                        window.limeChart = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: 'Peso',
                                    data: values,
                                    backgroundColor: backgroundColors,
                                    borderColor: borderColors,
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                maintainAspectRatio: false,
                                responsive: true,
                                indexAxis: 'y', // Deixa o gráfico na horizontal para melhor leitura
                                scales: {
                                    x: {
                                        suggestedMin: Math.min(...values) * 1.1, // Pequena margem para valores negativos
                                        suggestedMax: Math.max(...values) * 1.1
                                    }
                                },
                                plugins: {
                                    legend: {display: false},
                                    datalabels: {
                                        color: '#000',
                                        font: {
                                            weight: 'bold'
                                        },
                                        formatter: function (value) {
                                            return value.toFixed(2); // Exibe o valor com 2 casas decimais
                                        },
                                        anchor: function (context) {
                                            // Define o anchor (posição) com base no valor da barra
                                            return context.dataset.data[context.dataIndex] >= 0 ? 'end' : 'start';
                                        },
                                        align: function (context) {
                                            // Define o alinhamento com base no valor da barra
                                            return context.dataset.data[context.dataIndex] >= 0 ? 'right' : 'left';
                                        }
                                    }
                                }
                            },
                            plugins: [ChartDataLabels] // Adiciona o plugin ao gráfico
                        });

                        document.getElementById('uploadStatusSample').textContent = 'Upload successful!';
                    })
                    .catch(error => {
                        console.error('There was a problem with the file upload:', error);
                        document.getElementById('uploadStatusSample').textContent = 'Upload failed. Please try again';
                    });
            });
        </script>
    </div>
</body>

</html>