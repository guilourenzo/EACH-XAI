<!DOCTYPE html>
<html>

<head>
    <title>Model Development</title>
    <link rel="stylesheet" type="text/css" href="stylesheets/style.css">
</head>

<body>
    <div id="menu">
        <%- include('templates/side_menu.ejs') %>
    </div>

    <div id="conteudo">
        <h1 style="width: calc(90%); text-align: center;">Manipulação de Dados e Construção do Modelo</h1>
        <!-- <div class="setorPreprocess">
            <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">Hiperparâmetros
            </div>
            <div class="conteudoSetorPreprocess">
            </div>
        </div> -->
        <form id="uploadForm" enctype="multipart/form-data">
            <div>
                <div id="fakeFileInput" style="align-content: center;">
                    <span id="fakeFileSpan"><b>Selecionar Dataset</b></span>
                    <input type="file" id="fileInput" name="uploadDataset" accept=".csv" style="display: none;">
                </div>
                <p></p>
                <p id="datasetFileName" style="margin-left: 10px;">Dataset:</p>
                <button type="submit" id="uploadButton">Upload Dataset</button>
                <p id="uploadStatus"></p>
            </div>
        </form>
        <div id="featureNumber" style="margin-left: 10px;">Número de variáveis:</div>
        <script>
            // Requisição inicial para buscar o nome do arquivo e número de variáveis ao carregar a página
            window.addEventListener('DOMContentLoaded', () => {
                fetch('/datasetFileName')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Nenhum dataset selecionado');
                        }
                        return response.json();
                    })
                    .then(data => {
                        document.getElementById('datasetFileName').innerText = 'Dataset: ' + data.fileName;
                        document.getElementById('featureNumber').innerText = 'Número de variáveis: ' + data.numVariaveis;
                        document.getElementById('k2').max = data.numVariaveis;
                        document.getElementById('k2').value = data.numVariaveis;
                    })
                    .catch(error => {
                        console.error('Erro ao carregar dataset:', error);
                        document.getElementById('datasetFileName').innerText = 'Nenhum dataset selecionado';
                        document.getElementById('featureNumber').innerText = '';
                    });
            });
        </script>
        <script>
            // Fake FileInput
            const fakeFileInput = document.getElementById('fakeFileInput');
            const fileInput = document.getElementById('fileInput');

            fakeFileInput.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', () => {
                document.getElementById('uploadButton').click();
            });

            // Add event listener to form submission
            document.getElementById('uploadForm').addEventListener('submit', function (event) {
                event.preventDefault(); // Evita o envio padrão do formulário

                var formData = new FormData(); // Cria um objeto FormData para armazenar os dados do formulário
                var fileInput = document.getElementById('fileInput');
                formData.append('uploadDataset', fileInput.files[0]); // Adiciona o arquivo ao FormData

                // Exibe a mensagem de upload em progresso
                document.getElementById('uploadStatus').textContent = 'Upload in progress...';

                // Envia os dados do formulário usando fetch
                fetch('/uploadDataset', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        // Limpa a mensagem de upload
                        document.getElementById('uploadStatus').textContent = '';

                        // Busca o nome do dataset atualizado
                        return fetch('/datasetFileName');
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data); // Para depuração
                        document.getElementById('datasetFileName').innerText = 'Dataset: ' + data.fileName;
                        document.getElementById('featureNumber').innerText = 'Número de variáveis: ' + data.numVariaveis;
                        document.getElementById('k2').max = data.numVariaveis;
                        document.getElementById('k2').value = data.numVariaveis;

                        // Atualiza os filtros de variáveis com o novo dataset
                        fetchVariables();
                    })
                    .catch(error => {
                        console.error('There was a problem with the file upload:', error);
                        // Display upload failed message
                        document.getElementById('uploadStatus').textContent = 'Upload failed. Please try again';
                    });
            });
        </script>

        <p style="margin-right: 10px; color: #333; font-weight: bold;">
            Selecione a <u>variável alvo</u>:
        </p>
        <div class="search-filter">
            <input type="text" id="search-target" placeholder="Digite para buscar..." onkeyup="filterOptions('target')">
            <div id="checkbox-list-target" class="checkbox-list"></div>
        </div>

        <p style="margin-top: 20px; margin-right: 10px; color: #333; font-weight: bold;">
            Selecione, caso queira, as <u>variáveis que deseja excluir</u>:
        </p>
        <div class="search-filter">
            <input type="text" id="search-deleted" placeholder="Digite para buscar..."
                onkeyup="filterOptions('deleted')">
            <div id="checkbox-list-deleted" class="checkbox-list"></div>
        </div>

        <script>
            let options = [];
            const selectedTarget = {};
            const selectedDeleted = {};

            // Função para buscar as variáveis do backend
            function fetchVariables() {
                fetch('/datasetFileName')
                    .then(response => response.json())
                    .then(data => {
                        options = data.variaveis;
                        filterOptions('target');
                        filterOptions('deleted');
                    })
                    .catch(error => {
                        console.error('Erro ao buscar as variáveis:', error);
                    });
            }

            // Função para filtrar e exibir as opções
            function filterOptions(type) {
                const searchValue = document.getElementById(`search-${type}`).value.toLowerCase();
                const checkboxList = document.getElementById(`checkbox-list-${type}`);
                checkboxList.innerHTML = ''; // Limpa as opções anteriores

                const otherSelections = type === 'target' ? selectedDeleted : selectedTarget;
                const filteredOptions = options.filter(
                    option => option.toLowerCase().includes(searchValue) && !otherSelections[option]
                );

                filteredOptions.forEach(option => {
                    const label = document.createElement('label');
                    const isChecked = (type === 'target' ? selectedTarget : selectedDeleted)[option] || false;
                    label.innerHTML = `<input type="checkbox" name="option" value="${option}" ${isChecked ? 'checked' : ''} 
                onchange="updateSelection(this, '${type}')"> ${option}`;
                    checkboxList.appendChild(label);
                });
            }

            // Função para atualizar o estado de seleção
            function updateSelection(checkbox, type) {
                const selectedGroup = type === 'target' ? selectedTarget : selectedDeleted;
                const otherGroup = type === 'target' ? selectedDeleted : selectedTarget;

                if (type === 'target') {
                    // Garante que apenas um checkbox pode ser selecionado para a variável alvo
                    if (checkbox.checked) {
                        // Desmarca qualquer outra opção selecionada
                        Object.keys(selectedTarget).forEach(key => {
                            delete selectedTarget[key];
                        });

                        // Marca a nova opção
                        selectedTarget[checkbox.value] = true;
                    } else {
                        delete selectedTarget[checkbox.value];
                    }
                } else {
                    // Mantém a lógica normal para variáveis excluídas (permite múltiplas seleções)
                    selectedGroup[checkbox.value] = checkbox.checked;
                }

                // Remove a variável do outro filtro se foi selecionada
                if (checkbox.checked) {
                    delete otherGroup[checkbox.value];
                }

                // Atualiza as listas para refletir as mudanças
                filterOptions('target');
                filterOptions('deleted');
            }

            // Inicializa as variáveis ao carregar a página
            fetchVariables();
        </script>

        <div id="foldsDiv">
            <div style="margin-left: 10px; display: flex; align-items: center; margin-bottom: 0;">
                <p style="margin-right: 10px; color: #333; font-weight: bold;">Número de dobras (folds):</p>
                <input type="number" id="foldInput" style="width: 50px; height: 15px;" min="2">
            </div>
            <p id="explain_sf" style="margin-left: 10px; margin-top: 0; margin-bottom: 30px;">Normalmente usa-se 5
                ou 10
                dobras.</p>
        </div>
        <div class="setorPreprocess">
            <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">Pré-processamento
                de
                Dados
            </div>
            <div class="conteudoSetorPreprocess">
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Escalonador
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Ferramentas utilizadas para normalizar ou escalar os dados.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <input type="checkbox" id="minmax" checked>
                            <label for="minmax" style="color:#333; margin-right: 20px;">MinMaxScaler</label>
                            <input type="checkbox" id="standard">
                            <label for="standard" style="color:#333; margin-right: 20px;">StandardScaler</label>
                            <input type="checkbox" id="robust">
                            <label for="robust" style="color:#333; margin-right: 20px;">RobustScaler</label>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">Seleção
                        de
                        Características
                    </div>
                    <div class="conteudoSetorPreprocess" style="justify-content: center;">
                        <p style="display: flex; align-items: center;">Filtre um subconjunto das
                            características
                            mais
                            importantes e relevantes de um conjunto de dados.
                            Esta etapa é importante pois simplifica e melhora modelos de aprendizado de máquina,
                            permitindo uma
                            interpretação mais clara dos padrões nos dados e melhorando a capacidade de
                            generalização do
                            modelo
                            para novos exemplos.</p>
                        <p style="display: flex; align-items: center;"> O método utilizado é o Select K Best. O
                            parâmetro k determina a quantidade de características que serão mantidas e as funções de
                            pontuação são responsáveis pela classificação das características de acordo com a
                            pontuação.
                        </p>
                        <div style="text-align: left; margin-left: 10px;">
                            <h2>Selecione o intervalo do parâmetro K:</h2>
                            <form>
                                <label for="k1">Menor valor do intervalo:</label>
                                <input type="number" id="k1" name="k1" min="1" value="1" style="margin-right: 20px"
                                    required>
                                <label for="k2">Maior valor do intervalo:</label>
                                <input type="number" id="k2" name="k2" min="1" style="margin-right: 20px" required>
                                <p id="error-message-k" style="color: red;"></p>
                            </form>

                            <script>
                                const k1Input = document.getElementById('k1');
                                const k2Input = document.getElementById('k2');
                                const errorMessageK = document.getElementById('error-message-k');

                                function validateInputs() {
                                    const k1Value = parseInt(k1Input.value) || 0;
                                    const k2Value = parseInt(k2Input.value) || 0;

                                    // Atualiza os limites conforme as restrições
                                    k1Input.max = k2Value;
                                    k2Input.min = k1Value;

                                    // Verifica se os valores inseridos são válidos
                                    if (k1Value < 0 || k1Value > k2Value) {
                                        errorMessageK.innerText = "O valor inicial deve ser maior ou igual a 0 e menor ou igual ao valor final.";
                                    } else if (k2Value < k1Value) {
                                        errorMessageK.innerText = "O valor final deve ser maior ou igual ao valor inicial e menor ou igual ao numero de características.";
                                    } else {
                                        errorMessageK.innerText = ""; // Limpa mensagem de erro se tudo está válido
                                    }
                                }

                                // Adiciona eventos para validar os inputs em cada alteração
                                k1Input.addEventListener('input', validateInputs);
                                k2Input.addEventListener('input', validateInputs);
                            </script>
                        </div>
                        <div style="text-align: left; margin-left: 10px; margin-top: 40px;">
                            <h2>Selecionar as funções de pontuação:</h2>
                            <input type="checkbox" id="f_classif" name="sn" checked>
                            <label for="f_classif" style="color:#333; margin-right: 20px;">f_classif</label>
                            <input type="checkbox" id="chi2" name="sn">
                            <label for="chi2" style="color:#333; margin-right: 20px;">chi2</label>
                            <input type="checkbox" id="mutual_info_classif" name="sn">
                            <label for="mutual_info_classif" style="color:#333">mutual_info_classif</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="setorPreprocess">
            <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                Hiperparâmetros
            </div>
            <div class="conteudoSetorPreprocess">
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Funções de ativação
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Função de ativação para as camadas.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <input type="checkbox" id="relu" checked>
                            <label for="relu" style="color:#333; margin-right: 20px;">relu</label>
                            <input type="checkbox" id="logistic">
                            <label for="logistic" style="color:#333; margin-right: 20px;">logistic</label>
                            <input type="checkbox" id="tanh">
                            <label for="tanh" style="color:#333; margin-right: 20px;">tanh</label>
                            <input type="checkbox" id="identity">
                            <label for="identity" style="color:#333">identity</label>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Solver
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Algoritmo de otimização utilizado para o ajuste dos pesos.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <input type="checkbox" id="adam" checked>
                            <label for="adam" style="color:#333; margin-right: 20px;">adam</label>
                            <input type="checkbox" id="lbfgs">
                            <label for="lbfgs" style="color:#333; margin-right: 20px;">lbfgs</label>
                            <input type="checkbox" id="sgd">
                            <label for="sgd" style="color:#333; margin-right: 20px;">sgd</label>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Taxa de Aprendizado
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Esquema de ajuste da taxa de aprendizado. Apenas usado quando solver='sgd'.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <input type="checkbox" id="constant" checked>
                            <label for="constant" style="color:#333; margin-right: 20px;">constant</label>
                            <input type="checkbox" id="adaptive">
                            <label for="adaptive" style="color:#333; margin-right: 20px;">adaptive</label>
                            <input type="checkbox" id="invscaling">
                            <label for="invscaling" style="color:#333; margin-right: 20px;">invscaling</label>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Taxa de Aprendizado Inicial
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            A taxa de aprendizado inicial usada. Controla o tamanho do passo ao atualizar os pesos.
                            Apenas usada quando solver=’sgd’ ou ‘adam’.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <form id="lrForm">
                                <label for="lr1">Menor valor do intervalo:</label>
                                <input type="number" id="lr1" name="lr1" min="0.0001" max="0.1" step="0.0001"
                                    value="0.0001" style="margin-right: 20px" required>
                                <label for="lr2">Maior valor do intervalo:</label>
                                <input type="number" id="lr2" name="lr2" min="0.0001" max="0.1" step="0.0001"
                                    value="0.1" style="margin-right: 20px" required>
                                <p id="error-message-lr" style="color: red;"></p>
                            </form>
                            <script>
                                const lr1Input = document.getElementById('lr1');
                                const lr2Input = document.getElementById('lr2');
                                const errorMessageLR = document.getElementById('error-message-lr');

                                function validateInputs() {
                                    const lr1Value = parseFloat(lr1Input.value);
                                    const lr2Value = parseFloat(lr2Input.value);

                                    // Atualiza os limites conforme as restrições
                                    lr1Input.max = lr2Value;
                                    lr2Input.min = lr1Value;

                                    // Verifica se os valores inseridos são válidos
                                    if (lr1Value > lr2Value) {
                                        errorMessageLR.innerText = "O valor inicial não pode ser maior que o valor final.";
                                    } else if (lr2Value < lr1Value) {
                                        errorMessageLR.innerText = "O valor final não pode ser menor que o valor inicial.";
                                    } else {
                                        errorMessageLR.innerText = ""; // Limpa mensagem de erro se tudo está válido
                                    }
                                }

                                // Adiciona eventos para validar os inputs em cada alteração
                                lr1Input.addEventListener('input', validateInputs);
                                lr2Input.addEventListener('input', validateInputs);
                            </script>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Alfa
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Parâmetro de regularização que controla o quanto o modelo penaliza pesos altos para
                            evitar
                            overfitting. Defina o intervalo de alfa.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <form id="alphaForm">
                                <label for="alpha1">Menor valor do intervalo:</label>
                                <input type="number" id="alpha1" name="alpha1" min="0.00001" max="0.1" step="0.00001"
                                    value="0.00001" style="margin-right: 20px" required>
                                <label for="alpha2">Maior valor do intervalo:</label>
                                <input type="number" id="alpha2" name="alpha2" min="0.00001" max="0.1" step="0.00001"
                                    value="0.1" style="margin-right: 20px" required>
                                <p id="error-message-alpha" style="color: red;"></p>
                            </form>
                            <script>
                                const alpha1Input = document.getElementById('alpha1');
                                const alpha2Input = document.getElementById('alpha2');
                                const errorMessageAlpha = document.getElementById('error-message-alpha');

                                function validateInputs() {
                                    const alpha1Value = parseFloat(alpha1Input.value);
                                    const alpha2Value = parseFloat(alpha2Input.value);

                                    // Atualiza os limites conforme as restrições
                                    alpha1Input.max = alpha2Value;
                                    alpha2Input.min = alpha1Value;

                                    // Verifica se os valores inseridos são válidos
                                    if (alpha1Value > alpha2Value) {
                                        errorMessageAlpha.innerText = "O valor inicial não pode ser maior que o valor final.";
                                    } else if (alpha2Value < alpha1Value) {
                                        errorMessageAlpha.innerText = "O valor final não pode ser menor que o valor inicial.";
                                    } else {
                                        errorMessageAlpha.innerText = ""; // Limpa mensagem de erro se tudo está válido
                                    }
                                }

                                // Adiciona eventos para validar os inputs em cada alteração
                                alpha1Input.addEventListener('input', validateInputs);
                                alpha2Input.addEventListener('input', validateInputs);
                            </script>
                        </div>
                    </div>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Camada Oculta
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Defina as configurações da quantidade de camadas ocultas e o número de neurônios por
                            camada.
                        </p>
                        <div id="configuracoes"></div>
                        <div style="display: flex; gap: 10px;">
                            <button id="addConfiguracao" style="margin-left: 10px;">+</button>
                            <button id="removeConfiguracao">-</button>
                        </div>
                    </div>
                    <script>
                        let configuracaoCount = 0;

                        document.getElementById('addConfiguracao').addEventListener('click', () => {
                            configuracaoCount++;
                            const configuracoes = document.getElementById('configuracoes');
                            const novaConfiguracao = document.createElement('div');
                            novaConfiguracao.className = 'setorPreprocess';
                            novaConfiguracao.id = `configuracao${configuracaoCount}`;
                            novaConfiguracao.innerHTML = `
                                <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                                    Configuração ${configuracaoCount}
                                </div>
                                <div class="conteudoSetorPreprocess">
                                    <div style="text-align: center; margin-left: 10px;">
                                        <form id="hiddenLayerForm">
                                            <label for="numLayers">Número de camadas ocultas:</label>
                                            <input type="number" id="numLayers" name="numLayers" min="1" style="width: 50px;" required>
                                            <div id="layerInputs" style="display: flex; flex-wrap: wrap; justify-content: center;"></div>
                                        </form>
                                    </div>
                                </div>
                            `;
                            configuracoes.appendChild(novaConfiguracao);

                            const numLayersInput = novaConfiguracao.querySelector('#numLayers');
                            const layerInputsDiv = novaConfiguracao.querySelector('#layerInputs');

                            numLayersInput.addEventListener('input', () => {
                                const numLayers = parseInt(numLayersInput.value);
                                layerInputsDiv.innerHTML = '';

                                for (let i = 1; i <= numLayers; i++) {
                                    const layerInput = document.createElement('input');
                                    layerInput.type = 'number';
                                    layerInput.min = 1;
                                    layerInput.required = true;
                                    layerInput.style.width = '50px';

                                    const layerLabel = document.createElement('label');
                                    layerLabel.textContent = `Neurônios da ${i}ª camada:`;
                                    layerLabel.style.marginRight = '10px';

                                    const layerContainer = document.createElement('div');
                                    layerContainer.style.marginRight = '20px';
                                    layerContainer.appendChild(layerLabel);
                                    layerContainer.appendChild(layerInput);

                                    layerInputsDiv.appendChild(layerContainer);
                                }
                            });
                        });

                        document.getElementById('removeConfiguracao').addEventListener('click', () => {
                            const configuracoes = document.getElementById('configuracoes');
                            if (configuracoes.lastChild) {
                                configuracoes.removeChild(configuracoes.lastChild);
                                configuracaoCount--;
                            }
                        });
                    </script>
                </div>
                <div class="setorPreprocess">
                    <div class="titulo" style="padding: 7px;" onclick="expandirRetangulo(this.parentNode)">
                        Número de Épocas
                    </div>
                    <div class="conteudoSetorPreprocess">
                        <p style="display: flex; align-items: center; text-align: center;">
                            Número máximo de iterações (épocas) para o algoritmo de otimização.
                        </p>
                        <div style="text-align: center; margin-left: 10px;">
                            <form id="epochForm">
                                <label for="epoch1">Menor valor do intervalo:</label>
                                <input type="number" id="epoch1" name="epoch1" min="0" step="100" value="1000"
                                    style="margin-right: 20px" required>
                                <label for="epoch2">Maior valor do intervalo:</label>
                                <input type="number" id="epoch2" name="epoch2" min="0" step="100" value="10000"
                                    style="margin-right: 20px" required>
                                <p id="error-message-epoch" style="color: red;"></p>
                            </form>
                            <script>
                                const epoch1Input = document.getElementById('epoch1');
                                const epoch2Input = document.getElementById('epoch2');
                                const errorMessageEpoch = document.getElementById('error-message-epoch');

                                function validateInputs() {
                                    const epoch1Value = parseFloat(epoch1Input.value);
                                    const epoch2Value = parseFloat(epoch2Input.value);

                                    // Atualiza os limites conforme as restrições
                                    epoch1Input.max = epoch2Value;
                                    epoch2Input.min = epoch1Value;

                                    // Verifica se os valores inseridos são válidos
                                    if (epoch1Value > epoch2Value) {
                                        errorMessageEpoch.innerText = "O valor inicial não pode ser maior que o valor final.";
                                    } else if (epoch2Value < epoch1Value) {
                                        errorMessageEpoch.innerText = "O valor final não pode ser menor que o valor inicial.";
                                    } else {
                                        errorMessageEpoch.innerText = ""; // Limpa mensagem de erro se tudo está válido
                                    }
                                }

                                // Adiciona eventos para validar os inputs em cada alteração
                                epoch1Input.addEventListener('input', validateInputs);
                                epoch2Input.addEventListener('input', validateInputs);
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <p></p>
        <label for="nTrials" style="margin-right: 10px; color: #333; font-weight: bold;">Quantidade de configurações
            testadas pelo Optuna<span class="tooltip">?
                <span class="tooltip-text">É
                    utilizado uma biblioteca chamada Optuna para encontrar os melhores hiperparâmetros do
                    modelo. Quanto maior o número de configurações testadas, mais tempo leva para encontrar os melhores
                    hiperparâmetros.</span>
            </span>:</label>
        <input type="number" id="nTrials" name="nTrials" min="0" value="50" style="margin-right: 20px" required>
        <p id="explain_sf" style="margin-left: 10px; max-width: calc(50%); margin-top: 0; margin-bottom: 30px;"> </p>
        <button id="gerarConfig">Gerar</button>
        <p id="error-message" style="color: red;"></p>
        <script>
            document.getElementById('gerarConfig').addEventListener('click', () => {
                const errorMessage = document.getElementById('error-message');

                // Numero de folds
                const foldInput = parseInt(document.getElementById('foldInput').value);

                let foldConfig = '';
                if (foldInput) {
                    if (foldInput < 2) {
                        errorMessage.innerText = "O valor deve ser maior que 1.";
                    } else {
                        errorMessage.innerText = "";
                        foldConfig = `NumFolds: ${foldInput}`;
                    }
                }

                //Solver
                const minmax = document.getElementById('minmax').checked;
                const standard = document.getElementById('standard').checked;
                const robust = document.getElementById('robust').checked;

                let sacalerConfig = '';
                if (minmax || standard || robust) {
                    let scalerValues = [];
                    if (minmax) scalerValues.push('MinMaxScaler');
                    if (standard) scalerValues.push('StandardScaler');
                    if (robust) scalerValues.push('RobustScaler');
                    scalerConfig = `Scalers: ${scalerValues.join(', ')}`;
                }

                //K
                const k1Input = parseInt(document.getElementById('k1').value);
                const k2Input = parseInt(document.getElementById('k2').value);

                let kConfig = '';
                if (k1Input && k2Input) {
                    if (k1Input > k2Input) {
                        errorMessage.innerText = "O valor inicial não pode ser maior que o valor final para o parâmetro K ";
                    } else if (k2Input < k1Input) {
                        errorMessage.innerText = "O valor final não pode ser menor que o valor inicial para  o parâmetro K.";
                    } else {
                        errorMessage.innerText = "";
                        kConfig = `minK: ${k1Input}, maxK: ${k2Input}`;
                    }
                }

                //Score Function
                const f_classif = document.getElementById('f_classif').checked;
                const chi2 = document.getElementById('chi2').checked;
                const mutual_info_classif = document.getElementById('mutual_info_classif').checked;

                let scoreFunctionConfig = '';
                if (f_classif || chi2 || mutual_info_classif) {
                    let scoreFunctionValues = [];
                    if (f_classif) scoreFunctionValues.push('f_classif');
                    if (chi2) scoreFunctionValues.push('chi2');
                    if (mutual_info_classif) scoreFunctionValues.push('mutual_info_classif');
                    scoreFunctionConfig = `Score Function: ${scoreFunctionValues.join(', ')}`;
                }

                //Activation Funcion
                const relu = document.getElementById('relu').checked;
                const logistic = document.getElementById('logistic').checked;
                const tanh = document.getElementById('tanh').checked;
                const identity = document.getElementById('identity').checked;

                let activationFunctionConfig = '';
                if (relu || logistic || tanh || identity) {
                    let activationFunctionValues = [];
                    if (relu) activationFunctionValues.push('relu');
                    if (logistic) activationFunctionValues.push('logistic');
                    if (tanh) activationFunctionValues.push('tanh');
                    if (identity) activationFunctionValues.push('identity');
                    activationFunctionConfig = `Activation Function: ${activationFunctionValues.join(', ')}`;
                }

                //Solver
                const adam = document.getElementById('adam').checked;
                const lbfgs = document.getElementById('lbfgs').checked;
                const sgd = document.getElementById('sgd').checked;

                let solverConfig = '';
                if (adam || lbfgs || sgd) {
                    let solverValues = [];
                    if (adam) solverValues.push('adam');
                    if (lbfgs) solverValues.push('lbfgs');
                    if (sgd) solverValues.push('sgd');
                    solverConfig = `Solver: ${solverValues.join(', ')}`;
                }

                //Taxa de Aprendizado
                const constant = document.getElementById('constant').checked;
                const adaptive = document.getElementById('adaptive').checked;
                const invscaling = document.getElementById('invscaling').checked;

                let learningRateConfig = '';
                if (constant || adaptive || invscaling) {
                    let learningRateValues = [];
                    if (constant) learningRateValues.push('constant');
                    if (adaptive) learningRateValues.push('adaptive');
                    if (invscaling) learningRateValues.push('invscaling');
                    learningRateConfig = `Learning Rate: ${learningRateValues.join(', ')}`;
                }

                // Taxa de Aprendizado Inicial
                const lr1Input = parseFloat(document.getElementById('lr1').value);
                const lr2Input = parseFloat(document.getElementById('lr2').value);

                let lrConfig = '';
                if (lr1Input && lr2Input) {
                    if (lr1Input > lr2Input) {
                        errorMessage.innerText = "O valor inicial não pode ser maior que o valor final para a Taxa de Aprendizado Inicial.";
                    } else if (lr2Input < lr1Input) {
                        errorMessage.innerText = "O valor final não pode ser menor que o valor inicial para a Taxa de Aprendizado Inicial.";
                    } else {
                        errorMessageLR.innerText = "";
                        lrConfig = `minLearningRateInit: ${lr1Input}, maxLearningRateInit: ${lr2Input}`;
                    }
                }

                // Alfa
                const alpha1Input = parseFloat(document.getElementById('alpha1').value);
                const alpha2Input = parseFloat(document.getElementById('alpha2').value);

                let alfaConfig = '';
                if (alpha1Input && alpha2Input) {
                    if (alpha1Input > alpha2Input) {
                        errorMessage.innerText = "O valor inicial não pode ser maior que o valor final para o Alfa.";
                    } else if (alpha2Input < alpha1Input) {
                        errorMessage.innerText = "O valor final não pode ser menor que o valor inicial para o Alfa.";
                    } else {
                        errorMessage.innerText = "";
                        alfaConfig = `minAlfa: ${alpha1Input}, maxAlfa: ${alpha2Input}`;
                    }
                }

                // Camada Oculta
                const configuracoes = document.getElementById('configuracoes').children;
                const hiddenLayerSizes = [];

                let hiddenLayerConfig = '';
                if (configuracoes) {
                    for (let configuracao of configuracoes) {
                        const numLayersInput = configuracao.querySelector('#numLayers');
                        const layerInputsDiv = configuracao.querySelectorAll('#layerInputs input');

                        const numLayers = parseInt(numLayersInput.value);
                        const layerSizes = [];

                        // Captura o valor de neurônios de cada camada
                        for (let i = 0; i < numLayers; i++) {
                            const neuronios = parseInt(layerInputsDiv[i].value);
                            if (!isNaN(neuronios)) {
                                layerSizes.push(neuronios);
                            }
                        }

                        // Adiciona ao array no formato de tupla
                        if (layerSizes.length > 0) {
                            hiddenLayerSizes.push(`(${layerSizes.join(', ')})`);
                        }
                    }
                    // Monta a string no formato Grid Search
                    hiddenLayerConfig = `Hidden Layer Sizes: ${hiddenLayerSizes.join(', ')}`;
                }

                // Número de Épocas
                const epoch1Input = parseInt(document.getElementById('epoch1').value);
                const epoch2Input = parseInt(document.getElementById('epoch2').value);

                let epochConfig = '';
                if (epoch1Input && epoch2Input) {
                    if (epoch1Input > epoch2Input) {
                        errorMessage.innerText = "O valor inicial não pode ser maior que o valor final para o Número de Épocas.";
                    } else if (epoch2Input < epoch1Input) {
                        errorMessage.innerText = "O valor final não pode ser menor que o valor inicial para o Número de Épocas.";
                    } else {
                        errorMessage.innerText = "";
                        epochConfig = `minEpochs: ${epoch1Input}, maxEpochs: ${epoch2Input}`;
                    }
                }

                // Numero de Trials
                const nTrialsInput = parseInt(document.getElementById('nTrials').value);

                let nTrialsConfig = '';
                if (nTrialsInput) {
                    if (nTrialsInput <= 0) {
                        errorMessage.innerText = "O valor deve ser maior que 0.";
                    } else {
                        errorMessage.innerText = "";
                        nTrialsConfig = `NumTrials: ${nTrialsInput}`;
                    }
                }

                // Variável alvo e excluídas
                const targetSelecionadas = [];
                const deletedSelecionadas = [];

                const variaveisTargetElements = document.querySelectorAll('#checkbox-list-target input:checked');
                variaveisTargetElements.forEach(element => targetSelecionadas.push(element.value));

                const variaveisDeletedElements = document.querySelectorAll('#checkbox-list-deleted input:checked');
                variaveisDeletedElements.forEach(element => deletedSelecionadas.push(element.value));

                const conteudoFinal = `${foldConfig}\n${scalerConfig}\n${kConfig}\n${scoreFunctionConfig}\n${activationFunctionConfig}\n${solverConfig}\n${learningRateConfig}\n${lrConfig}\n${alfaConfig}\n${hiddenLayerConfig}\n${epochConfig}\n${nTrialsConfig}\nVar Target: ${targetSelecionadas.join(', ')}\nVar Deleted: ${deletedSelecionadas.join(', ')}`;

                fetch('/trainGridModel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({conteudoFinal}),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Best Params:", data.best_params);
                        console.log("Best Value:", data.best_value);
                    })
                    .catch(error => {
                        console.error('Erro ao executar o script:', error);
                    });
            });
        </script>
        <script>
            window.onload = function () {
                const retangulo = document.querySelector('.setorPreprocess');
                const conteudo = retangulo.querySelector('.conteudoSetorPreprocess');
                conteudo.style.display = "none";
            }

            function expandirRetangulo(retangulo) {
                const conteudo = retangulo.querySelector('.conteudoSetorPreprocess');
                if (conteudo.style.display === "block") {
                    conteudo.style.display = "none";
                    retangulo.style.height = "auto";
                } else {
                    conteudo.style.display = "block";
                }
            }

            fetch('/datasetFileName')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('datasetFileName').innerText = 'Dataset: ' + data.fileName;
                })
                .catch(error => console.error('Erro ao obter o nome do arquivo do dataset:', error));
        </script>
    </div>
</body>

</html>